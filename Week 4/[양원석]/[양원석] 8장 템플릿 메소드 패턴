# 8장: 템플릿 메소드 패턴 - 알고리즘 캡슐화하기
## 커피와 홍차 만들기
### 커피 만들기
1. 물을 끓인다
2. 끓는 물에 커피를 우려낸다
3. 커피를 컵에 따른다
4. 설탕과 우유를 추가한다
### 홍차 만들기
1. 물을 끓인다
2. 끓는 물에 찻잎을 우려낸다
3. 홍차를 컵에 따른다
4. 레몬을 추가한다.

```java
public class Coffee {

    void prepareRecipe() { // 알고리즘 작동
        boilWater();
        brewCoffeeGrinds();
        pourInCup();
        addSugarAndMilk();
    }

    public void boilWater() { // 알고리즘 단계 1
        System.out.print("물 끓이는 중");
    }

    public void brewCoffeeGrinds() { // 알고리즘 단계 2
        System.out.print("필터로 커피를 우려내는 중");
    }

    public void pourInCup() { // 알고리즘 단계 3
        System.out.print("컵에 따르는 중");
    }

    public void addSugarAndMilk() { // 알고리즘 단계 4
        System.out.print("설탕과 우유를 추가하는 중");
    }
}

public class Tea {

    void prepareRecipe() { // 알고리즘 작동
        boilWater();
        steepTeaBag();
        pourInCup();
        addLemon();
    }

    public void boilWater() { // 알고리즘 단계 1
        System.out.print("물 끓이는 중");
    }

    public void steepTeaBag() { // 알고리즘 단계 2
        System.out.print("찻잎을 우려내는 중");
    }

    public void pourInCup() { // 알고리즘 단계 3
        System.out.print("컵에 따르는 중");
    }

    public void addLemon() { // 알고리즘 단계 4
        System.out.print("레몬을 추가하는 중");
    }
}
```

### 공통된 부분을 뽑아서 추상화한다
#### 슈퍼클래스에서 공통 메서드 구현
```java
public class CaffeineBaverage {
    prepareRecipe();
    boilWater();
    pourInCup(); 
}
```

#### 자식 클래스에서 각각 커피와 홍차 내리기, 토핑(?) 추가 구현
```java
public class Coffee extends CaffeineBaverage {
    prepareRecipe();
    brewCoffeeGrinds();
    addSugarAndMilk();
}
```
  
---
  

### prepareRecipe() 메소드 자체를 추상화 할 순 없을까?
```java
// 슈퍼 클래스
public abstract class CaffeineBaverage{
    void prepareRecipe() {
        boilWater();
        brew();
        pourInCup();
        addCondiments();
    }

    abstract void brew(); // Coffee이냐 Tea이냐에 따라 달리 구현하므로 추상화

    abstract void addCondiments(); // Coffee이냐 Tea이냐에 따라 달리 구현하므로 추상화

    public void boilWater() { // 어느 클래스에서나 같은 기능을 하므로 상위 클래스에서 구현
        System.out.print("물 끓이는 중");
    }

     public void pourInCup() { // 어느 클래스에서나 같은 기능을 하므로 상위 클래스에서 구현
        System.out.print("컵에 따르는 중");
    }
}
```
```java
// 자식 클래스 - 커피
public class Coffee extends CaffeineBaverage {
    public void brew() {
        System.out.print("필터로 커피 내리는 중");
    }
    
    public void addCondiments() {
        System.out.print("설탕과 우유를 추가하는 중");
    }
}

// 자식 클래스 - 홍차
public class Tea extends CaffeineBaverage {
    public void brew() {
        System.out.print("찻잎을 우려내는 중");
    }
    
    public void addCondiments() {
        System.out.print("레몬을 추가하는 중");
    }
}
```

## 템플릿 메소드 패턴
위 예제에서 prepareRecipe()메소드가 템플릿 메소드이다
- 알고리즘의 각 단계를 정의
- 서브클래스에서 일부 단계를 구현할 수 있도록 유도할 수 있음
- 알고리즘의 구조는 그대로 유지하면서 특정 단계를 서브클래스에서 재정의할 수 있음

### 후크 활용하기
- 후크란? 추상 클래스에서 아무것도 들어있지 않은 메소드
- 이를 활용하면 서브클래스는 다양한 위치에서 알고리즘에 끼어들 수 있다

```java
// 슈퍼 클래스
public abstract class CaffeineBaverageWithHook {
    void prepareRecipe() {
        boilWater();
        brew();
        pourInCup();
        if (customerWatnsAddCondiments()) {
            addCondiments();
        }
    }

    abstract void brew(); // Coffee이냐 Tea이냐에 따라 달리 구현하므로 추상화

    abstract void addCondiments(); // Coffee이냐 Tea이냐에 따라 달리 구현하므로 추상화

    public void boilWater() { // 어느 클래스에서나 같은 기능을 하므로 상위 클래스에서 구현
        System.out.print("물 끓이는 중");
    }

    public void pourInCup() { // 어느 클래스에서나 같은 기능을 하므로 상위 클래스에서 구현
        System.out.print("컵에 따르는 중");
    }

    // 새로 추가된 후크
    boolean customerWatnsAddCondiments() {
        // 별 내용 없이 그냥 true를 리턴한다.
        // 필요할 때 서브클래스에서 오버라이드하여 사용
        return true;
    }
}
```
```java
public class CoffeeWithHook extends CaffeineBaverageWithHook {
    public void brew() {
        System.out.print("필터로 커피 내리는 중");
    }
    
    public void addCondiments() {
        System.out.print("설탕과 우유를 추가하는 중");
    }
    
    public boolean customerWatnsAddCondiments() {
        String answer = getUserInput(); // 손님에게 의견을 묻고, 그 답을 반환받는 함수

        if(answer.equals("YES")) {
            return true;
        } else {
            return false;
        }
    }
}
```

### 할리우드 원칙
__*먼저 연락하지 마세요. 저희가 연락 드리겠습니다*__
- 의존성 부패를 방지할 수 있다
    - 고수준 구성 요소가 저수준 구성 요소에 의존하고
    - 저수준 구성 요소가 고수준 구성 요소에 의존하고
    - 의존성이 복잡하게 꼬이는 것을 "의존성이 부패했다"라고 한다

CaffeineBaverage는 고수준 구성 요소  
Coffee, Tea 클래스는 저수준 구성 요소  
Coffee, Tea는 호출 당하기 전까지는 추상 클래스를 직접 호출하지 않는다  

